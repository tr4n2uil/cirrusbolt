package aquadew.services.data;import org.json.JSONObject;import org.json.JSONArray;import org.json.XML;import snowblozm.interfaces.Service;import snowblozm.interfaces.Block;import snowblozm.interfaces.Sequence;import snowblozm.core.SBException;/** *	@class DataEqualService *	@desc Checks for equality and gives error message as configured * *	@param data mixed Data to be checked [memory] optional default 1 *	@param value mixed Value to check against [memory] optional default 1 *	@param not boolean Is error on non-equalilty [memory] optional default true *	@param errormsg string Error message [memory] *	@param errstatus integer Error status code [memory] optional default 505 * *	@author Vibhaj Rajan <vibhaj8@gmail.com> *	**/public class DataEqualService implements Service {		/**	 *	@interface Service	**/	public Block input() throws SBException {		return new JSONObject("{\			\"required\":[\"errormsg\"],\			\"optional\":{\"data\":1, \"value\": 1, \"not\":true, \"errstatus\":505},\		}");	}		/**	 *	@interface Service	**/	public Block run(Block memory) throws SBException {		Object data = memory.get("data");		Object type = memory.get("value");		boolean result;		boolean not = memory.getBoolean("not");				if(data instanceof String){			result = ((String) data.equalsIgnoreCase((String) value));		}		else if(data instanceof Integer){			result = ((Integer) data == (Integer) value);		}		else if(data instanceof Float){			result = ((Float) data == (Float) value);		}		else {			memory.put("valid", false);			memory.put("msg", "Invalid Data Type");			memory.put("status", 501);			memory.put("details", "Data equality not supported for type : "+type+" @data.equal.service");			return memory;		}				if(not ^ result){			memory.put("valid", false);			memory.put("msg", memory.getString("errormsg"));			memory.put("status", memory.getString("errstatus"));			memory.put("details", "Data not equal to value : "+value+" @data.equal.service");			return memory;		}						memory.put("valid", true);		memory.put("msg", "Valid Data Encoding");		memory.put("status", 200);		memory.put("details", "Successfully executed");		return memory;	}		/**	 *	@interface Service	**/	public Sequence output() throws SBException {		return new JSONArray();	}	}