package aquadew.services.data;import javax.servlet.ServletRequest;import org.json.JSONObject;import org.json.JSONArray;import org.json.XML;import snowblozm.interfaces.Service;import snowblozm.interfaces.Block;import snowblozm.interfaces.Sequence;import snowblozm.core.SBException;/** *	@class DataDecodeService *	@desc Decodes JSON XML WDDX data into array (supports copy of GET and POST data) * *	@param type string Request type [memory] optional default 'json' ('get', 'post', 'json', 'xml', 'wddx') *	@param data string/object Data to be decoded [memory] optional default '' when type=('get', 'post') expects ServletRequest object * *	@return result array Decoded data [memory] * *	@author Vibhaj Rajan <vibhaj8@gmail.com> *	**/public class DataDecodeService implements Service {		/**	 *	@interface Service	**/	public Block input() throws SBException {		return new JSONObject("{\			\"optional\":{\"type\":\"json\", \"data\":\"\"},\		}");	}		/**	 *	@interface Service	**/	public Block run(Block memory) throws SBException {		String data;		Block result;		String type = memory.getString("type");				if(type.equalsIgnoreCase("get") || type.equalsIgnoreCase("post")){			ServletRequest sr = (ServletRequest) memory.get("data");			result = new JSONObject(sr.getParameterMap());		} 		else if(type.equalsIgnoreCase("json")){			data = memory.getString("data");			result = new JSONObject(data);		}		else if(type.equalsIgnoreCase("xml")){			data = memory.getString("data");			result = XML.toJSONObject(data);		}		else if(type.equalsIgnoreCase("wddx")){			data = memory.getString("data");			// To be implemented			result = null;		}		else {			memory.put("valid", false);			memory.put("msg", "Invalid Data Type");			memory.put("status", 501);			memory.put("details", "Data decoding not supported for type : "+type+" @data.decode.service");			return memory;		}				memory.put("valid", true);		memory.put("msg", "Valid Data Decoding");		memory.put("status", 200);		memory.put("details", "Successfully executed");		return memory;	}		/**	 *	@interface Service	**/	public Sequence output() throws SBException {		return new JSONArray("[\"result\"]");	}	}