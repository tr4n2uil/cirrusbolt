package aquadew.database;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.ResultSetMetadata;import java.sql.Types;import aquadew.core.ADException;import org.json.JSONObject;import org.json.JSONArray;import snowblozm.interfaces.Block;import snowblozm.interfaces.Sequence;/** *	@class JDBC *	@desc Abstract class for JDBC database services  * *	@author Vibhaj Rajan <vibhaj8@gmail.com> ***/public abstract class JDBC implements DataService {	/** 	 *	@var conn Connection resource	**/	protected Connection conn;		/** 	 *	@constructor 	**/	public JDBC(String url, String user, String pass, String driver) throws ADException {		System.setProperty("jdbc.drivers", driver);		this.open(url, user, pass);	}		/** 	 *	@interface DataService	**/	public void open(String url, String user, String pass) throws ADException {		try {			this.conn = DriverManager.getConnection(this.url, username, password);		} catch(SQLException e) {			throw new ADException("Exception Occured : " + e.getMessage());		} finally {			if(this.conn != null)				this.conn.close();		}	}		/** 	 *	@interface DataService	**/	public Object getResult(String query, Sequence values, int type) throws ADException {		PreparedStatement ps = this.conn.prepareStatement(query);		int length = values.length();		int index = 0;				for(int i=0; i<length; i++){			switch(values.getInt(i++)){				case 1 :					ps.setString(index++, values.getString(i));					break;				case 2 :					ps.setInt(index++, values.getInt(i));					break;				case 3 :					ps.setLong(index++, values.getLong(i));					break;				case 4 :					ps.setDouble(index++, values.getDouble(i));					break;				case 5 :					ps.setBoolean(index++, values.getBoolean(i));					break;				case 6 :					ps.setDate(index++, Date.valueOf(values.getString(i)));					break;				case 7 :					ps.setTime(index++, Time.valueOf(values.getString(i)));					break;				case 8 :					ps.setTimestamp(index++, Timestamp.valueOf(values.getString(i)));					break;				default :					if(ps != null) 						ps.close();					throw new ADException("Exception Occured : Illegal Parameter Type in Query @JDBC/getResult")					break;			}		}				switch(type){			case 0 : // Select			default :				Sequence result;				ResultSet rs;								try {					rs = ps.executeQuery();										ResultSetMetadata rsm = rs.getMetadata();					int colCount = rsm.getColumnCount();					String[] columns = new String[colCount];					int[] types = new int[colCount];					for(int i=0; i<colCount; i++){						columns[i] = rtm.getColumnName(i+1);						types[i] = rtm.getColumnType(i+1);					}					result = new JSONArray();					while(rs.next()){						Block row = new JSONObject();						for(int i=0; i<colCount; i++){							switch(types[i]){								case Types.ARRAY :									row.put(columns[i], rs.getArray(i));									break;								case Types.BIGINT :									row.put(columns[i], rs.getLong(i));									break;								case Types.BIT :								case Types.BOOLEAN :									row.put(columns[i], rs.getBoolean(i));									break;								case Types.DATE :									row.put(columns[i], rs.getDate(i).toString);									break;								case Types.DECIMAL :								case Types.DOUBLE :								case Types.FLOAT :								case Types.REAL :									row.put(columns[i], rs.getDouble(i));									break;								case Types.INTEGER :								case Types.NUMERIC :								case Types.SMALLINT :								case Types.TINYINT :									row.put(columns[i], rs.getInt(i));									break;								case Types.LONGVARCHAR :								case Types.VARCHAR :									row.put(columns[i], rs.getString(i));									break;								case Types.TIME :									row.put(columns[i], rs.getTime(i).toString());									break;								case Types.TIMESTAMP :									row.put(columns[i], rs.getTimestamp(i).toString());									break;								default :									throw new ADException("Exception Occured : Invalid Column Type @JDBC/getResult");									break;							}						}						result.put(row);					}				} catch(Exception e) {					throw new ADException("Exception Occured : " + e.getMessage());				} finally {					if(rs != null)						rs.close();					if(ps != null) 						ps.close();				}								return result;				break;			case 1 : // Update / Delete				int result;				try {					result = ps.executeUpdate();				} catch(Exception e) {					throw new ADException("Exception Occured : " + e.getMessage());				} finally {					if(ps != null) 						ps.close();				}				return result;				break;			case 3 : // Insert				long result;				try {					ps.executeUpdate();					result = this.getAutoId();				} catch(Exception e) {					throw new ADException("Exception Occured : " + e.getMessage());				} finally {					if(ps != null) 						ps.close();				}				return result;				break;		}			}		/** 	 *	@interface DataService	**/	public abstract long getAutoId() throws ADException;		/** 	 *	@interface DataService	**/	public void close() throws ADException {		if(this.conn != null)			this.conn.close();	}	}